package com.ivant.cms.action;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Map;
import java.util.StringTokenizer;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.apache.struts2.interceptor.ServletRequestAware;
import org.apache.struts2.interceptor.SessionAware;

import com.ivant.cms.delegate.CompanyDelegate;
import com.ivant.cms.entity.Company;
import com.ivant.cms.interceptors.FrontCompanyInterceptor;
import com.ivant.cms.interfaces.CompanyAware;
import com.ivant.utils.FileUtil;
import com.opensymphony.xwork2.Action;
import com.opensymphony.xwork2.Preparable;

public class ChatAction implements Action, SessionAware, Preparable,
		ServletRequestAware, CompanyAware {

	private static final Logger logger = Logger.getLogger(ChatAction.class);

	private static final CompanyDelegate companyDelegate = CompanyDelegate
			.getInstance();

	private Map session;
	private HttpServletRequest request;

	private Company comp;
	private long companyId;

	private String user_id;
	private String staff_id;

	/* All return string types for chat */
	private String adminLogReturn = "";
	private String buffer = "";
	private InputStream fileInputStream;
	private InputStream receiverStream; //return stream of the method receiver()
	private InputStream sessionStream; //return stream of the method setSessionID()
	private InputStream logStream; //return stream of the method adminLog()

	/* For file writing in chat */
	BufferedReader br = null;
	BufferedWriter bw = null;
	StringTokenizer token;

	private String destinationPath;

	@Override
	public void prepare() throws Exception {
		try {
			companyId = Long.parseLong(request.getParameter("company"));
			comp = companyDelegate.find(companyId);
		} catch (Exception e) {
			logger.debug("cannot find company");
		}
	}

	@SuppressWarnings("unchecked")
	public String execute() throws Exception {
		if (comp != null) {
			session.put(FrontCompanyInterceptor.COMPANY_REQUEST_KEY, comp.getId());
			return SUCCESS;
		} else {
			//System.out.println("MMMM " + comp);
		}
		return Action.ERROR;
	}

	@Override
	public void setSession(Map session) {
		this.session = session;
	}

	@Override
	public void setServletRequest(HttpServletRequest request) {
		this.request = request;
	}

	@Override
	public void setCompany(Company company) {
		this.comp = company;
	}

	public Company getCompany() {
		return comp;
	}

	public void setCompanyId(long companyId) {
		this.companyId = companyId;
	}

	public long getCompanyId() {
		return companyId;
	}

	/**
	 * this method checks if the default files and directories, 
	 * involve in the chat system, exists. If the files doesn't exist,
	 * it creates the files and writes the default value
	 * 
	 * @throws IOException
	 */
	private void checkFiles() throws IOException {

		ServletContext servletContext = request.getSession().getServletContext();

		destinationPath = "companies";

		FileUtil.createDirectory(servletContext.getRealPath(destinationPath));
		destinationPath += File.separator + comp.getName();
		FileUtil.createDirectory(servletContext.getRealPath(destinationPath));
		destinationPath += File.separator + "files";
		FileUtil.createDirectory(servletContext.getRealPath(destinationPath));
		destinationPath += File.separator + "chat";
		FileUtil.createDirectory(servletContext.getRealPath(destinationPath));

		destinationPath = servletContext.getRealPath(destinationPath);

		if (!new File(destinationPath + File.separator + "admin_status.txt")
				.exists()) {
			new File(destinationPath + File.separator + "admin_status.txt").createNewFile();
			bw = new BufferedWriter(new FileWriter(new File(destinationPath
					+ File.separator + "admin_status.txt")));
			bw.write("0");
			bw.close();
		}
		if (!new File(destinationPath + File.separator + "id.txt").exists()) {
			new File(destinationPath + File.separator + "id.txt")
					.createNewFile();
			bw = new BufferedWriter(new FileWriter(new File(destinationPath
					+ File.separator + "id.txt")));
			bw.write("0");
			bw.close();
		}
	}
	
	/**
	 * When the user sends a message, this method is called.
	 * The method first calls the checkFiles(), then makes
	 * the chat log of the user.
	 * 
	 * If the user specified a name in the textbox provided
	 * the chat system assumes it is the 'username', otherwise
	 * the unique id, generated by the system.
	 * 
	 *  When the user sends a message, the system would pre-format
	 *  the message in html format so it can be viewable at the
	 *  interface, then writes it on the user's chat log
	 *  
	 *  If the user has been alloted an admin, the system writes
	 *  the unique id of the user at the chat queue and masterlog
	 *  of the admin.
	 * @return 
	 */
	public String sendUser() {
		String writeinfile, username;
		try {
			checkFiles();
			
			bw = new BufferedWriter(new FileWriter(destinationPath
					+ File.separator + "out_" + request.getParameter("name")
					+ ".txt", true));

			if (request.getParameter("chat_name") != "")
				username = request.getParameter("chat_name");
			else
				username = request.getParameter("name");

			writeinfile = "<div class=\'chat_item\'><p class='sender'>"
					+ username + ":  " + request.getParameter("message")
					+ "</p>" + "<h6>" + request.getParameter("date")
					+ "</h></div>" + "\n";

			bw.write(writeinfile);
			bw.newLine();
			bw.flush();
			bw.close();

			if (!request.getParameter("staff_id").equals("")) {
				bw = new BufferedWriter(new FileWriter(destinationPath
						+ File.separator + "chat_queue_"
						+ request.getParameter("staff_id").split("-")[0].trim() + ".txt",
						true));
				bw.write(request.getParameter("name") + "="
						+ request.getParameter("chat_name") + "||");
				bw.flush();
				bw.close();

				bw = new BufferedWriter(new FileWriter(destinationPath
						+ File.separator + "masterlog_"
						+ request.getParameter("staff_id").split("-")[0] + ".txt", true));
				bw.write(writeinfile);
				bw.newLine();
				bw.flush();
				bw.close();
			} else{
				System.out.println("NO STAFF");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	/**
	 * This method writes the chat log of the user saved from the
	 * cookie.
	 * @return
	 */
	public String writeAll() {
		try {
			checkFiles();
			bw = new BufferedWriter(new FileWriter(destinationPath
					+ File.separator + "out_" + request.getParameter("name")
					+ ".txt", false));

			bw.write(request.getParameter("message"));
			bw.newLine();
			bw.flush();
			bw.close();

		} catch (IOException e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	/**
	 * Receiver is called to update the chat log of the user
	 * at the interface of the system. If the chat log isn't found, 
	 * the system will assume that the user is offline.
	 * 
	 * The receiver then returns the stream as a result on the struts
	 * @return
	 */
	public String receiver() {
		try {
			buffer = "";//
			checkFiles();
			br = new BufferedReader(new FileReader(destinationPath
					+ File.separator + "out_"
					+ request.getParameter("u_id").trim() + ".txt"));//
			String temp;//
			while ((temp = br.readLine()) != null)
				buffer += temp;//
			br.close();//				
			receiverStream = new ByteArrayInputStream(buffer.getBytes());//
		} catch (FileNotFoundException ex) {
			receiverStream = new ByteArrayInputStream("0".getBytes());
		} catch (Exception e) {
			e.printStackTrace();
			receiverStream = new ByteArrayInputStream("0".getBytes());
		}
		return SUCCESS;
	}

	/**
	 * deleteLog() is called everytime the page unloads. As
	 * the method name itself, it deletes the chat log of the
	 * user.
	 * @return
	 */
	public String deleteLog() {
		try {
			checkFiles();
			//System.out.println(request.getParameter("u_id"));
			new File(destinationPath + File.separator + "out_"
					+ request.getParameter("u_id").trim() + ".txt").delete();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return SUCCESS;
	}

	/**
	 * The method setSessionID() is responsible for setting a
	 * unique id for the user.
	 * 
	 * It would check first if the files needed are existing.
	 * Then reads from a file named 'id.txt' which contains
	 * the unique id. Then it makes a new file which would be
	 * then be use as the chat log. Then it returns the id
	 * as stream. It will increment the unique id read from the 
	 * file.
	 * @return
	 */
	public String setSessionID() {
		try {
			checkFiles();
			br = new BufferedReader(new FileReader(destinationPath
					+ File.separator + "id.txt"));

			/* you can add the date in the id */
			String str = br.readLine();

			br.close();

			int tmp = Integer.parseInt(str.trim());
			new File(destinationPath + File.separator + "out_chat_user"+tmp+".txt").createNewFile();
			buffer = "chat_user" + tmp++;

			sessionStream = new ByteArrayInputStream(buffer.getBytes());

			bw = new BufferedWriter(new FileWriter(destinationPath
					+ File.separator + "id.txt"));
			bw.write(Integer.toString(tmp));
			bw.close();

		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return SUCCESS;
	}
	
	/**
	 * This method checks if an admin is online or not. It would
	 * then read the first line of the file 'admin_status.txt' which
	 * is the number of admin currently online. Then makes an array
	 * of string respective to the number of admin currently online,
	 * and counts the users currently assigned to the admin. Then
	 * it searches for the admin with the least count of assigned users
	 * and returns the id of that admin.
	 * @return
	 */
	public String adminLog() {
		String[] admin_map;
		int admin_count = 0, i;
		boolean new_admin = true;
		user_id = request.getParameter("user_id");//

		try {
			StringTokenizer token;

			checkFiles();

			String side = request.getParameter("admin_status").trim();

			//System.out.println(destinationPath);
			staff_id = request.getParameter("staff_id");
			br = new BufferedReader(new FileReader(destinationPath
					+ File.separator + "admin_status.txt"));

			String str = br.readLine();
			if(str==null){
				str = "0";
			}
			admin_count = Integer.parseInt(str.trim());
			admin_map = new String[admin_count];

			if (admin_count > 0)
				for (i = 0; i < admin_count; i++) {
					admin_map[i] = br.readLine().trim();
				}
			br.close();

			bw = new BufferedWriter(new FileWriter(destinationPath
					+ File.separator + "admin_status.txt"));

			if (admin_count == 0) {
				bw.write("0");
				adminLogReturn = "0";
			} else {
				
				if (side.equals("user_side")&&!user_id.equals("")) {
					new_admin = false;
					int least_count = 10000, index = 0;
					
					//System.out.println(user_id+"=========================");
					if (request.getParameter("status").equals("1")) {
						for (i = 0; i < admin_map.length; i++) {
						//	string.matches("(?i).*i am.*");
							if (admin_map[i].matches("(?i).*"+user_id.trim()+".*")) {
								index = i;
								break;
							}
						}
					} else if (request.getParameter("status").equals("0")) {
						for (i = 0; i < admin_map.length; i++) {
							//System.out.println(admin_map[i]);
							token = new StringTokenizer(admin_map[i], "|");
							if (token.countTokens() < least_count) {
								least_count = token.countTokens();
								index = i;
							}
						}
				//		System.out.println(user_id.trim() + "=============\n=============\n=============\n=============");
						if(request.getParameter("new_user").equals("0"))
							admin_map[index] = admin_map[index] + "|" + user_id.trim();
					}
					//System.out.println("==" + admin_map[index] + "==");
					token = new StringTokenizer(admin_map[index], "|");
					adminLogReturn = token.nextElement().toString().trim();
				}
			}
			bw.write(admin_count + "");
			bw.newLine();
			for (i = 0; i < admin_map.length; i++) {
				bw.write(admin_map[i]);
				bw.newLine();
			}
			bw.close();
		} catch (Exception ex) {
			ex.printStackTrace();
			adminLogReturn = "0";
		}
		logStream = new ByteArrayInputStream(adminLogReturn.getBytes());
		return SUCCESS;
	}
	
	/**
	 * Used to get current time with format.
	 * @return
	 */
	public String getTimeStamp() {
		Calendar calendar = new GregorianCalendar();
		String[] monthNames = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",
				"Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
		String am_pm;
		String hr = String.valueOf(calendar.get(Calendar.HOUR));
		String min = String.valueOf(calendar.get(Calendar.MINUTE));
		String sec = String.valueOf(calendar.get(Calendar.SECOND));
		String mm = monthNames[calendar.get(Calendar.MONTH)];
		String dd = String.valueOf(calendar.get(Calendar.DAY_OF_MONTH));
		String yy = String.valueOf(calendar.get(Calendar.YEAR));

		if (calendar.get(Calendar.AM_PM) == 0)
			am_pm = "AM";
		else
			am_pm = "PM";

		String time = mm + "." + " " + (dd.length() == 1 ? "0" + dd : dd)
				+ ", " + (yy.length() == 1 ? "0" + yy : yy) + " "
				+ (hr.length() == 1 ? "0" + hr : hr) + ":"
				+ (min.length() == 1 ? "0" + min : min) + ":"
				+ (sec.length() == 1 ? "0" + sec : sec) + " " + am_pm;

		fileInputStream = new ByteArrayInputStream(time.getBytes());

		return SUCCESS;
	}

	public InputStream getFileInputStream() {
		return fileInputStream;
	}

	public InputStream getReceiverStream() {
		return receiverStream;
	}

	public InputStream getSessionStream() {
		return sessionStream;
	}

	public InputStream getLogStream() {
		return logStream;
	}
}
